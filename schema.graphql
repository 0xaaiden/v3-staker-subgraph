type V3Staker @entity {
  # Contract address
  id: ID!

  #factory: Bytes!
  #nonFungiblePositionManager: Bytes!
  #maxIncentiveDuration: BigInt!
  #maxIncentiveStartLeadTime: BigInt!

  incentives: [Incentive!] @derivedFrom(field: "staker")
  stakes: [Stake!] @derivedFrom(field: "staker")
}

type Incentive @entity {
  # Incentive ID
  id: ID!

  staker: V3Staker!
  creator: User!

  rewardToken: Bytes!
  pool: Bytes!
  startTime: BigInt!
  endTime: BigInt!
  vestingPeriod: BigInt!
  refundee: Bytes!
  initialRewardAmount: BigInt!
  #rewardAmountLeft: BigInt!
  rewardAmountRefunded: BigInt!
  ended: Boolean!

  stakes: [Stake!]! @derivedFrom(field: "incentive")
}

type Stake @entity {
  id: ID!

  staker: V3Staker!
  position: Position!
  incentive: Incentive!
  user: User!

  stakedTimestamp: BigInt!

  #claimed: BigInt!
  activeStake: Boolean!
}

type Position @entity {
  id: ID!

  owner: User!
  pool: Bytes!

  liquidity: BigInt!

  stakes: [Stake!]! @derivedFrom(field: "position")
}

type User @entity {
  id: ID!

  incentivesCreated: [Incentive!]! @derivedFrom(field: "creator")
  stakes: [Stake!]! @derivedFrom(field: "user")
  positions: [Position!]! @derivedFrom(field: "owner")
}
